# org and app are used when using the serverless paid app feature. we can use it for $20 a month.

#org: abigpotostew21
#app: stargaze-rarity
service: stargaze-rarity
frameworkVersion: '3'
custom:
  serverless-offline:
    ignoreJWTSignature: true
  metadataTopic: ${self:service}-${opt:stage, 'dev'}-metadata-topic #This is the global name of the topic
  scripts:
    hooks:
      'after:package:createDeploymentArtifacts': >
        printf "[after:package:createDeploymentArtifacts hook] Removing development dependencies " &&
        (cd .serverless && unzip -qq stargaze-rarity.zip -d stargaze-rarity)          && printf "." &&
        (cd .serverless && rm -rf stargaze-rarity/node_modules)                       && printf "." &&
        (cd .serverless/stargaze-rarity && npm install --only=prod > /dev/null 2>&1)  && printf "." &&
        (cd .serverless/stargaze-rarity/ && zip -q -FSr ../stargaze-rarity.zip .)     && printf ".\n" &&
        rm -rf .serverless/stargaze-rarity/ &&
        printf "[after:package:createDeploymentArtifacts hook] Done\n"
  refreshFrequency: 30 minutes

provider:
  name: aws
  region: us-east-1
  runtime: nodejs14.x  
  environment:
    METADATA_TOPIC_ARN: arn:aws:sns:${aws:region}:${aws:accountId}:${self:custom.metadataTopic}
  iam:
    role:
      statements:
        - Effect: Allow
          Action: sns:Publish
          Resource:
            - Ref: MetadataTopic
  httpApi:
    cors: true
    authorizers:
      basicAuth:
        functionName: basicAuth
        resultTtlInSeconds: 0
        identitySource:
          - $request.header.Authorization 
        type: request
    # https://www.serverless.com/framework/docs/providers/aws/events/http-api#jwt-authorizers    

functions:
  basicAuth:
    handler: auth.handler
  refresher:
    handler: refresher.handler
    environment:
      REFRESH_FREQUENCY: ${self:custom.refreshFrequency}
    events:
      - schedule: rate(${self:custom.refreshFrequency})
      - httpApi:
          path: /contracts/refresh
          method: put
          authorizer:
            name: basicAuth
            type: request
  api:
    timeout: 20
    handler: api.handler
    events:
      - httpApi:
          path: /contracts
          method: get
      - httpApi:
          path: /contracts/{contractId}
          method: post
          authorizer:
            name: basicAuth
            type: request
      - httpApi:
          path: /contracts/{contractId}
          method: get
      - httpApi:
          path: /contracts/{contractId}/rarities
          method: get
      - httpApi:
          path: /contracts/{contractId}/rarities/{tokenId}
          method: get
  metadata:
    timeout: 900 # 15 minutes, because uncached ipfs files take a while to download
    handler: metadata.handler
    events:
      - httpApi:
          method: POST
          path: /metadata-test
          authorizer:
            name: basicAuth
            type: request
      - sns: 
          arn: 
            Ref: MetadataTopic
          topicName: ${self:custom.metadataTopic}

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-plugin-scripts

#  - serverless-pseudo-parameters

resources:
  Resources:
    MetadataTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.metadataTopic}
      
#  Resources:
#    LambdaRole: ${file(./resource/LambdaRole.yml)}
